// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TRA.Data.Concrete.EntityFramework.Contexts;

#nullable disable

namespace TRA.Data.Migrations
{
    [DbContext(typeof(TRADbContext))]
    [Migration("20240912105810_mig_2")]
    partial class mig_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TRA.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2378),
                            Description = "Hiking is a journey through nature's most serene landscapes—dense forests, rugged mountain peaks, hidden waterfalls—each one rewarding your effort with a beauty that can only be discovered on foot. As the sun sets and you reach the summit, the sense of accomplishment mixes with awe, reminding you of the power of simply walking through the world’s wonders.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2379),
                            Name = "Hiking"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2382),
                            Description = "Feel the wind in your hair and the world rushing past as you glide down open roads or twisty trails on a bicycle. Whether you’re navigating through charming countryside, coasting along the beach, or zipping through bustling city streets, biking gives you a front-row seat to experience your surroundings. It’s a thrill of speed and freedom, where every turn offers a new vista, and every pedal brings you closer to your next adventure.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2382),
                            Name = "Bicycle"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2384),
                            Description = "The open road stretches ahead, promising new discoveries at every bend. There’s something intoxicating about a road trip—the thrill of spontaneous detours, the soundtrack of your favorite tunes, and the freedom to explore wherever your heart desires.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2385),
                            Name = "Drive"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2387),
                            Description = "Whether you’re navigating tranquil lakes, winding rivers, or riding the exhilarating currents of the ocean, kayaking is a personal journey into the heart of nature. As you skim over the water’s surface, you become part of the landscape, able to reach secret coves, hidden islands, and serene spots inaccessible by any other means.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2387),
                            Name = "Kayak"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2389),
                            Description = "Slicing through fresh powder as you carve your way down a snow-covered mountain is a rush like no other. Skiing is the perfect blend of adrenaline and elegance—each swoop and turn making you feel weightless as the world becomes a blur of white and blue. From high alpine peaks with panoramic views to cozy mountain resorts where hot cocoa awaits, skiing offers a thrill that lingers long after the day’s last run.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2390),
                            Name = "Ski"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2391),
                            Description = "Feel the exhilaration as you rise out of the water, your skis skimming across the surface, and you pick up speed behind a powerful boat. Water skiing is pure adrenaline—the rush of wind in your face and the splash of water at your feet as you cut through waves. Each turn and jump offers a new challenge, a test of balance, and an opportunity to push yourself. It's the ultimate way to combine water, speed, and thrill, leaving you craving more.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2392),
                            Name = "Water Ski"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2394),
                            Description = "Underneath the surface, you’re free to lose yourself in the tranquility of the underwater world or power through a refreshing workout. Swimming is both a peaceful escape and a personal challenge, offering a sense of freedom that stays with you long after you leave the water.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(2394),
                            Name = "Swim"
                        });
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FolloweeId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolloweeId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Callsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Camino de Santiago is a collection of ancient pilgrimage routes that converge at the Santiago de Compostela Cathedral in northwest Spain, the burial site of St. James. Some pilgrims carry a scallop shell during the journey, as its lines symbolize their own trek, and those of other pilgrims around the world. This is another long-distance adventure — to do the approximately 500-mile route in full may take 30 days or more.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1036),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1033),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "Spain",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1037),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Hiking trail in Spain",
                            UserId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "This cycling tour takes you along the Ourthe River from its mouth into the Meuse in Liège to Vieuxville and back. Highlights include cycling paths along the river bank, quiet climbs with views across the Condroz and Ardennes, the view at Roche au Faucons (last few meters access on foot only), and the rock faces at the river near Sy. The route uses RAVeL cycling paths along the river banks, but also includes climbs on both sides of the valley with great views.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1041),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1040),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "Belgium",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1042),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Bicycle route in Belgium",
                            UserId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "In terms of a best directon of travel, the Grossglockner pass is so good, it really doesnt matter which way you drive it.  We tend to prefer an approach from the south, as the rise up to the summit is longer and more sweeping, so that bit more fun to drive.  Having said that, it tends to be more popular going the other way, as people make their way south from Germany, through Austria and into the Dolomites, just south of the pass.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1047),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1045),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "Austria",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1047),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Driving route in Austria",
                            UserId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0,
                            CategoryId = 4,
                            CommentCount = 1,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas porttitor iaculis nisl a ultrices. Vivamus non aliquet ante, sit amet malesuada risus. Nunc sollicitudin sed ante vel bibendum. Etiam vehicula faucibus lacus, efficitur porta dui auctor vitae. Proin auctor dapibus ligula. Quisque dignissim tincidunt lectus tempus auctor. Morbi suscipit facilisis lorem, ac lacinia quam venenatis quis. Curabitur accumsan dui nec dui.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1050),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1049),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "Canada",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1051),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Kayaking spot in Canada",
                            UserId = 1,
                            ViewCount = 1
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0,
                            CategoryId = 5,
                            CommentCount = 2,
                            Content = "In volutpat luctus finibus. Cras pulvinar, mi in elementum congue, quam quam ultrices enim, id dictum nunc nisl a ex. Proin convallis suscipit venenatis. Duis mattis eu lacus eget interdum. Etiam tincidunt, justo convallis pretium posuere, nibh orci tincidunt ligula, non pulvinar elit diam vel nibh. Fusce vel maximus mi.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1054),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1053),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "France",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1054),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Skiing place in France",
                            UserId = 1,
                            ViewCount = 2
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0,
                            CategoryId = 6,
                            CommentCount = 1,
                            Content = "Suspendisse dolor odio, dapibus eget risus ut, interdum porttitor felis. In nulla magna, commodo ac faucibus eget, pretium sit amet arcu. Integer odio ante, dapibus aliquam congue at, viverra at lectus. Pellentesque sit amet elementum mi. Phasellus purus urna, aliquam id metus et, sagittis faucibus nisi.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1057),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1056),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "Turkey",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1058),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Water Skii in Turkey",
                            UserId = 1,
                            ViewCount = 2
                        },
                        new
                        {
                            Id = 7,
                            Balance = 0,
                            CategoryId = 7,
                            CommentCount = 2,
                            Content = "Aliquam erat volutpat. Etiam vitae auctor tellus, vel cursus mi. Integer ex eros, bibendum ac luctus ut, condimentum eu nibh. Etiam nibh neque, consectetur sed augue eu, lacinia lobortis ante. Integer ut molestie nunc.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1061),
                            Date = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1060),
                            Duration = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsPinned = false,
                            Location = "Greece",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 9, 12, 10, 58, 9, 526, DateTimeKind.Utc).AddTicks(1062),
                            Rating = 0,
                            Thumbnail = "img/postImages/defaultPostImage.jpg",
                            Title = "Swimming areas in Greece",
                            UserId = 1,
                            ViewCount = 2
                        });
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "52835445-c626-4fd3-8110-15c34232730a",
                            Name = "Category.Create",
                            NormalizedName = "CATEGORY.CREATE"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "9b364e67-c210-4eb2-bc91-3c245da04b0e",
                            Name = "Category.Read",
                            NormalizedName = "CATEGORY.READ"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "2c2ca3e9-ef85-49a8-b1e2-e27a295d179e",
                            Name = "Category.Update",
                            NormalizedName = "CATEGORY.UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "0c4e9a64-6bd5-4752-8d18-71ebd1d58412",
                            Name = "Category.Delete",
                            NormalizedName = "CATEGORY.DELETE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "dd663ce0-6608-4f52-8258-89a2f92eb0a8",
                            Name = "Post.Create",
                            NormalizedName = "POST.CREATE"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "dc650c79-ee90-4a4b-a03c-db8563497f0d",
                            Name = "Post.Read",
                            NormalizedName = "POST.READ"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "a2731662-ca92-405b-aa9b-ba1a1bbff145",
                            Name = "Post.Update",
                            NormalizedName = "POST.UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "75f1c25c-3d0f-4832-b740-60ab368ba65c",
                            Name = "Post.Delete",
                            NormalizedName = "POST.DELETE"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "ee594128-c8b3-4db7-a3e2-45e31917e75f",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "df129047-e098-4fd4-9366-dc0087f349a2",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = "e36ab727-8174-40f1-918c-ce46e0f95fee",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = "f2347943-ecd7-475b-accb-cc0f5903e3fe",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = "621bf266-a19c-4cc2-9af8-40fb2f0e55ae",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = "32be0e26-002a-4631-8064-354c371103d9",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = "d00f8be7-6b0b-4bb2-bf19-daf776d0cc23",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = "b6c7636b-d358-4cd6-8707-19ddf5acb79d",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = "b1b21f32-e3a1-473e-9f76-279cc0d9e2d1",
                            Name = "Comment.Create",
                            NormalizedName = "COMMENT.CREATE"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = "b6d2bc1e-5410-4909-b58b-bf5a327b2c3b",
                            Name = "Comment.Read",
                            NormalizedName = "COMMENT.READ"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = "b41be95a-2024-4e1f-be5e-cbfbfa52a7a0",
                            Name = "Comment.Update",
                            NormalizedName = "COMMENT.UPDATE"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = "d89bc0bd-8141-4259-bf53-effbecde0ac2",
                            Name = "Comment.Delete",
                            NormalizedName = "COMMENT.DELETE"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = "5ce0ff2f-a738-4d77-9449-b8fc6ce403fa",
                            Name = "AdminArea.Home.Read",
                            NormalizedName = "ADMINAREA.HOME.READ"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = "8ade6c98-4514-4e7e-b320-8fde57b3ab6d",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("TRA.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("TRA.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Picture")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User of Travel App",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09954d92-a96d-4cf2-9d01-cc88957e0ce1",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/adminuser",
                            FirstName = "Admin",
                            InstagramLink = "https://instagram.com/adminuser",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7horcDPDvq9veDdxDlF+xoOcD4fdlQ0AQ12HK0M4j9t2Re2O9fbO6A9UFcwEp3fA==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "~/img/userImages/defaultUser.png",
                            SecurityStamp = "ece1dd0a-079a-455a-be5c-27bd48b3bb69",
                            TwitterLink = "https://twitter.com/adminuser",
                            TwoFactorEnabled = false,
                            UserName = "adminuser",
                            WebsiteLink = "https://travelapp.com/",
                            YoutubeLink = "https://youtube.com/adminuser"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of Travel App",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e651ec71-e2d9-4f06-a7a9-bbc97c35217b",
                            Email = "editoruser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/editoruser",
                            FirstName = "Editor",
                            InstagramLink = "https://instagram.com/editoruser",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBgNrfbqLDTR4i4jdeFWXxJsEdwa5gv82r+Rcb5cVPfs/rvdOcVV/cQ2CjQriAt4nw==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "~/img/userImages/defaultUser.png",
                            SecurityStamp = "ee2030dd-667d-4f0f-b90a-6c723ff5b1fa",
                            TwitterLink = "https://twitter.com/editoruser",
                            TwoFactorEnabled = false,
                            UserName = "editoruser",
                            WebsiteLink = "https://travelapp.com/",
                            YoutubeLink = "https://youtube.com/editoruser"
                        },
                        new
                        {
                            Id = 3,
                            About = "Test User of Travel App",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfc32dac-113a-4be1-b1f6-8e9d43c6f9e0",
                            Email = "testuser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/testuser",
                            FirstName = "Test",
                            InstagramLink = "https://instagram.com/testuser",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER@GMAIL.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJwn22V58e/gbu8XkKO8zK+I1B6w1AfpRlTKPpN9EOwkrrDP7dc4meajtsJPTmLj8Q==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "~/img/userImages/defaultUser.png",
                            SecurityStamp = "49d25d87-7f5f-4bae-841d-25b441305401",
                            TwitterLink = "https://twitter.com/testuser",
                            TwoFactorEnabled = false,
                            UserName = "testUser",
                            WebsiteLink = "https://travelapp.com/",
                            YoutubeLink = "https://youtube.com/testuser"
                        });
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 10
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 11
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 12
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 13
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 14
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 15
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 16
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 20
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 21
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 22
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 20
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 21
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 20
                        });
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Follow", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.User", "Followee")
                        .WithMany("Followers")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TRA.Entities.Concrete.User", "Follower")
                        .WithMany("Followees")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Like", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRA.Entities.Concrete.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRA.Entities.Concrete.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Post", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRA.Entities.Concrete.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRA.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRA.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("TRA.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("TRA.Entities.Concrete.User", b =>
                {
                    b.Navigation("Followees");

                    b.Navigation("Followers");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
